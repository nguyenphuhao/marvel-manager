{"version":3,"sources":["components/layout/SignedInLinks.js","components/layout/Navbar.js","views/layout/NavbarView.js","config/MarvelAPI.js","services/CharacterService.js","components/common/LoadingPanel.js","components/marvel/comics/ComicList.js","components/marvel/characters/CharacterDetails.js","store/actions/characterActions.js","views/marvel/characters/CharacterDetailsView.js","components/marvel/characters/CharacterGrid.js","components/dashboard/Dashboard.js","views/dashboard/DashboardView.js","views/marvel/characters/CharacterGridView.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/characterReducer.js","store/reducers/rootReducer.js","index.js"],"names":["SignedInLinks","props","react_default","a","createElement","id","Date","getTime","className","NavLink","to","Navbar","Link","src","alt","data-target","layout_SignedInLinks","NavbarView","layout_Navbar","MarvelAPI","axios","create","baseURL","process","defaults","params","apikey","hash","ts","services_CharacterService","request","url","concat","limit","offset","method","get","FETCH_CHARACTERS","FETCH_COMICS_BY_CHARACTER","LoadingPanel","loadingPanel","gridContent","document","querySelector","this","loaded","ReactDOM","createPortal","Component","ComicList","comicList","comics","length","map","c","key","style","fontSize","title","textAlign","description","thumbnail","path","extension","marginLeft","CharacterDetails","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchCharacterDetails","console","log","_this$props","characters","ch","border","borderRadius","padding","name","comics_ComicList","common_LoadingPanel","connect","state","objectSpread","character","dispatch","_ref3","asyncToGenerator","regenerator_default","mark","_callee3","getState","result","charResult","comicsResult","wrap","_context3","prev","next","type","CharacterService","fetchCharacterById","sent","status","data","results","fetchCommicsByCharacter","t0","error","stop","_x5","_x6","apply","arguments","CharacterDetailsView","characters_CharacterDetails","match","CharacterGrid","handlePageChanged","event","page","take","skip","_this","fetchCharacters","handleRowClick","selectCharacter","dataItem","grid","main","height","item","selected","selectedId","selectedField","total","pageable","onPageChange","onRowClick","field","width","cell","_ref","_callee","_context","_x","_x2","Dashboard","characters_CharacterGrid","DashboardView","dashboard_Dashboard","CharacterGridView","App","HashRouter","layout_NavbarView","Switch","Route","exact","component","Boolean","window","location","hostname","initState","authReducer","undefined","characterReducer","action","rootReducer","combineReducers","auth","store","createStore","applyMiddleware","thunk","render","es","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c0b2b8a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nconst SignedInLinks = (props) => {\r\n    return (\r\n        <ul id={props.id ? props.id : new Date().getTime()} className={props.className}>\r\n            <li>\r\n                <NavLink to=\"/character\"><i className=\"material-icons\">arrow_back</i></NavLink>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SignedInLinks;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SignedInLinks from './SignedInLinks';\r\nconst Navbar = () => {\r\n    return (\r\n        <div>\r\n            <nav className=\"red darken-2\">\r\n                <div className=\"nav-wrapper\">\r\n                    <Link to='/' className=\"brand-logo\"><img className=\"responsive-img\" src=\"./img/logo1.png\" alt=\"Marvel Manager\"/></Link>\r\n                    <Link to=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></Link>\r\n                    <SignedInLinks className=\"right hide-on-med-and-down\"/>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport Navbar from './../../components/layout/Navbar';\r\nconst NavbarView = () => {\r\n    return (\r\n        <Navbar />\r\n    )\r\n}\r\n\r\nexport default NavbarView","import axios from 'axios';\r\nconst MarvelAPI = axios.create({\r\n    baseURL: process.env.REACT_APP_MARVEL_API_URL,\r\n});\r\nMarvelAPI.defaults.params = {\r\n    apikey: process.env.REACT_APP_MARVEL_API_KEY,\r\n    hash: process.env.REACT_APP_MARVEL_API_HASH,\r\n    ts: \"\"\r\n}\r\n// MarvelAPI.prototype.request = function(config){\r\n//     var defaultConfig = {\r\n//         baseURL: process.env.REACT_APP_MARVEL_API_URL,\r\n//         params: {\r\n//             apikey: process.env.REACT_APP_MARVEL_API_KEY,\r\n//             hash: process.env.REACT_APP_MARVEL_API_HASH,\r\n//             ts: \"\"\r\n//         },\r\n//         data: {}\r\n//     }\r\n//     MarvelAPI.request()\r\n// }\r\n// MarvelAPI.interceptors.request.use(function (c) {\r\n//     // Do something before request is sent\r\n//     let newConfig = Object.assign({}, c);\r\n//     newConfig.url = `${newConfig.url}?ts=&apikey=${}&hash=${process.env.REACT_APP_MARVEL_API_HASH}`\r\n//     return newConfig;\r\n// }, function (error) {\r\n//     // Do something with request error\r\n//     return Promise.reject(error);\r\n// });\r\nexport default MarvelAPI;","import MarvelAPI from '../config/MarvelAPI';\r\nclass CharacterService {\r\n    fetchCharacters(params){\r\n        const FETCH_CHARACTERS = \"/v1/public/characters\";\r\n        return MarvelAPI.request({\r\n            url: `${FETCH_CHARACTERS}?limit=${params.limit}&offset=${params.offset}`,\r\n            method: 'get',\r\n            params: params\r\n        });\r\n    }\r\n    fetchCharacterById(id){\r\n        const FETCH_CHARACTERS = \"/v1/public/characters\";\r\n        return MarvelAPI.get(FETCH_CHARACTERS+\"/\"+id);\r\n    }\r\n    fetchCommicsByCharacter(id){\r\n        const FETCH_COMICS_BY_CHARACTER = `/v1/public/characters/${id}/comics`\r\n        return MarvelAPI.get(FETCH_COMICS_BY_CHARACTER);\r\n    }\r\n}\r\nexport default new CharacterService();","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nclass LoadingPanel extends Component {\r\n    render() {\r\n        const loadingPanel = (\r\n            <div className=\"k-loading-mask\">\r\n                <span className=\"k-loading-text\">Loading</span>\r\n                <div className=\"k-loading-image\"></div>\r\n                <div className=\"k-loading-color\"></div>\r\n            </div>\r\n        );\r\n\r\n        const gridContent = document && document.querySelector('.k-grid-content');\r\n        if (this.props.loaded && this.props.loaded === true) {\r\n            return \"\"\r\n        }else{\r\n            return gridContent ? ReactDOM.createPortal(loadingPanel, gridContent) : loadingPanel;\r\n        }\r\n    }\r\n}\r\nexport default LoadingPanel","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nconst ComicList = (props) => {\r\n    const comicList = props.comics && props.comics.length > 0 ? props.comics.map(c => {\r\n        return (\r\n            <li className=\"collection-item\" key={c.id}>\r\n                <div className=\"row\">\r\n                    <div className=\"col s8\">\r\n                        <div style={{ fontSize: '13pt' }}><b>{c.title}</b></div>\r\n                        <p style={{ textAlign: 'justify' }}>{c.description ? c.description : \"Updating...\"}</p>\r\n                    </div>\r\n                    <div className=\"col s3\">\r\n                        <img src={`${c.thumbnail.path}.${c.thumbnail.extension}`} alt={c.title} className=\"responsive-img\" />\r\n                    </div>\r\n                </div>\r\n\r\n            </li>\r\n        )\r\n    }) : \"\";\r\n    return (\r\n        <div>\r\n            <ul className=\"collection\">\r\n                <li className=\"collection-header\" style={{ marginLeft: '10px' }}><h4>Comic(s)</h4></li>\r\n                {comicList}\r\n            </ul>\r\n            <div className=\"center-align\"><Link to='/'>Go Back</Link></div>\r\n        </div>\r\n    )\r\n}\r\nexport default ComicList","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchCharacterDetails } from '../../../store/actions/characterActions';\r\nimport LoadingPanel from '../../common/LoadingPanel';\r\nimport { Redirect } from 'react-router-dom';\r\nimport ComicList from '../comics/ComicList';\r\nclass CharacterDetails extends Component {\r\n    constructor(props) {\r\n        super();\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchCharacterDetails(this.props.id);\r\n    }\r\n    render() {\r\n        const { loaded } = this.props;\r\n        console.log(this.props);\r\n\r\n        const { characters, comics } = this.props;\r\n        const ch = characters && comics && characters.length > 0 && comics.length > 0 ? characters[0] : null;\r\n        if (ch) {\r\n            return (\r\n                <div className=\"container section character-details\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col s4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-image\" style={{\r\n                                    border: '1px solid #ddd',\r\n                                    borderRadius: '4px',\r\n                                    padding: '5px',\r\n                                }}>\r\n                                    <img alt={ch.name} className=\"img-responsive\" src={ch.thumbnail.path + \".\" + ch.thumbnail.extension} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s8\">\r\n                            <h4>{ch.name}</h4>\r\n                            <p>{ch.description}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12\">\r\n                            <ComicList comics={comics} />\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n        return <LoadingPanel loaded={loaded} />\r\n\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...state.character\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchCharacterDetails: (id) => dispatch(fetchCharacterDetails(id)),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CharacterDetails);","import CharacterService from './../../services/CharacterService';\r\nexport const fetchCharacters = (params) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let result = null;\r\n            dispatch({ type: 'FETCH_CHARACTERS', result });\r\n            result = await CharacterService.fetchCharacters(params);\r\n            dispatch({ type: 'FETCH_CHARACTERS_SUCCESS', result });\r\n        } catch (error) {\r\n            dispatch({ type: 'FETCH_CHARACTERS_FAILURE', error });\r\n        }\r\n    }\r\n}\r\nexport const fetchCharacterById = (id) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let result = null;\r\n            dispatch({ type: 'FETCH_CHARACTERS', result });\r\n            result = await CharacterService.fetchCharacterById(id);\r\n            dispatch({ type: 'FETCH_CHARACTERS_SUCCESS', result });\r\n        } catch (error) {\r\n            dispatch({ type: 'FETCH_CHARACTERS_FAILURE', error });\r\n        }\r\n    }\r\n}\r\nexport const fetchCharacterDetails = (id) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let result = {characters: [], comics:[]};\r\n            dispatch({ type: 'FETCH_CHARACTERS_DETAILS', result });\r\n            let charResult = await CharacterService.fetchCharacterById(id);\r\n            if (charResult.status === 200) {\r\n                result.characters = charResult.data.data.results;\r\n            }\r\n            let comicsResult = await CharacterService.fetchCommicsByCharacter(id);\r\n            if (comicsResult.status === 200) {\r\n                result.comics = comicsResult.data.data.results;\r\n            }\r\n            \r\n            dispatch({ type: 'FETCH_CHARACTERS_DETAILS_SUCCESS', result });\r\n        } catch (error) {\r\n            console.error(error);\r\n            dispatch({ type: 'FETCH_CHARACTERS_DETAILS_FAILURE', error });\r\n        }\r\n    }\r\n}\r\n\r\nexport const selectCharacter = (selectedId) => {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: 'SELECT_CHARACTER', selectedId });\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport CharacterDetails from '../../../components/marvel/characters/CharacterDetails';\r\nclass CharacterDetailsView extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CharacterDetails id={this.props.match.params.id} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CharacterDetailsView;\r\n","import React, { Component } from 'react';\r\n// Import the Grid component.\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { connect } from 'react-redux';\r\nimport { fetchCharacters, selectCharacter } from '../../../store/actions/characterActions';\r\nimport { Link } from 'react-router-dom';\r\nimport LoadingPanel from '../../common/LoadingPanel';\r\nclass CharacterGrid extends Component {\r\n\r\n    componentDidMount() {\r\n        var params = {\r\n            limit: 20,\r\n            offset: 0,\r\n        }\r\n        this.props.fetchCharacters(params);\r\n    }\r\n    render() {\r\n        const { grid } = this.props;\r\n\r\n        const gridStyle = {\r\n            height: '700px'\r\n        }\r\n        return (\r\n            <div className=\"section character-list\">\r\n                <h5>All Marvels</h5>\r\n                <Grid style={gridStyle}\r\n                    data={grid.data ? grid.data.map(\r\n                        (item) => ({ ...item, selected: item.id === grid.selectedId }))\r\n                    : []}\r\n                    selectedField=\"selected\"\r\n                    skip={grid.offset}\r\n                    take={grid.limit}\r\n                    total={grid.total}\r\n                    pageable={true}\r\n                    onPageChange={this.handlePageChanged}\r\n                    onRowClick={this.handleRowClick}\r\n                >\r\n                    <GridColumn field=\"name\" width=\"150\" title=\"Name\" />\r\n                    <GridColumn field=\"description\" className='nowrap' title=\"Description\" />\r\n                    <GridColumn field=\"thumbnail\" width=\"200\" title=\" \" cell={(props) => (\r\n                        <td>\r\n                            <Link to={'/character/' + props.dataItem['id']}>\r\n                                <img className=\"img-responsive\" alt=\"\" height='150' src={`${props.dataItem[props.field].path}.${props.dataItem[props.field].extension}`} />\r\n                            </Link>\r\n                        </td>\r\n                    )} />\r\n                </Grid>\r\n                <LoadingPanel loaded={grid.loaded} />\r\n            </div>\r\n        )\r\n    }\r\n    handlePageChanged = (event) => {\r\n        var params = {\r\n            limit: event.page.take,\r\n            offset: event.page.skip,\r\n        }\r\n        this.props.fetchCharacters(params);\r\n    }\r\n    handleRowClick = (event) => {\r\n        this.props.selectCharacter(event.dataItem.id);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        grid: {\r\n            loaded: state.character.loaded,\r\n            selectedId: state.character.selectedId,\r\n            offset: state.character.offset,\r\n            limit: state.character.limit,\r\n            total: state.character.total,\r\n            data: state.character.results\r\n        }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchCharacters: (params) => dispatch(fetchCharacters(params)),\r\n        selectCharacter: (id) => dispatch(selectCharacter(id))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CharacterGrid);\r\n","import React, { Component } from 'react';\r\nimport CharacterGrid from '../marvel/characters/CharacterGrid';\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CharacterGrid />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Dashboard;","import React, { Component } from 'react';\r\nimport Dashboard from './../../components/dashboard/Dashboard';\r\nclass DashboardView extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"dashboard-view\">\r\n                <Dashboard />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default DashboardView;","import React, { Component } from 'react';\r\nimport CharacterGrid from './../../../components/marvel/characters/CharacterGrid';\r\nclass CharacterGridView extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"charactergrid-view\">\r\n                <CharacterGrid />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CharacterGridView;\r\n","import React, { Component } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport NavbarView from './views/layout/NavbarView';\nimport CharacterDetailsView from './views/marvel/characters/CharacterDetailsView';\nimport DashboardView from './views/dashboard/DashboardView';\nimport CharacterGridView from './views/marvel/characters/CharacterGridView';\nclass App extends Component {\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App container\">\n          <NavbarView />\n          <Switch>\n            <Route exact path=\"/\" component={DashboardView} />\n            <Route exact path=\"/character\" component={CharacterGridView} />\n            <Route path=\"/character/:id\" component={CharacterDetailsView} />\n          </Switch>\n        </div>\n      </HashRouter>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {}\r\n\r\nconst authReducer = (state = initState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default authReducer;","const initState = {\r\n}\r\n\r\nconst characterReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_CHARACTERS':\r\n            return {\r\n                ...state,\r\n                loaded: false\r\n            };\r\n        case 'FETCH_CHARACTERS_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.result.data.data,\r\n                selectedId: null,\r\n                loaded: true\r\n            };\r\n        case 'FETCH_CHARACTERS_FAILURE':\r\n            return {\r\n                ...state,\r\n                loaded: true\r\n            };\r\n\r\n        case 'FETCH_CHARACTERS_DETAILS':\r\n            return {\r\n                ...state,\r\n                loaded: false\r\n            };\r\n        case 'FETCH_CHARACTERS_DETAILS_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.result,\r\n                loaded: true\r\n            };\r\n        case 'FETCH_CHARACTERS_DETAILS_FAILURE':\r\n            return {\r\n                ...state,\r\n                loaded: true\r\n            };\r\n        case 'SELECT_CHARACTER':\r\n            return { ...state, selectedId: action.selectedId };\r\n        case 'CALL_ERRORS':\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default characterReducer;","import authReducer from './authReducer';\r\nimport characterReducer from './characterReducer';\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    character: characterReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@progress/kendo-theme-material/dist/all.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}