{"version":3,"sources":["components/layout/SignedInLinks.js","components/layout/Navbar.js","views/layout/NavbarView.js","config/MarvelAPI.js","services/CharacterService.js","components/common/LoadingPanel.js","components/marvel/characters/CharacterDetails.js","store/actions/characterActions.js","views/marvel/characters/CharacterDetailsView.js","components/marvel/characters/CharacterGrid.js","components/dashboard/Dashboard.js","views/dashboard/DashboardView.js","views/marvel/characters/CharacterGridView.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/characterReducer.js","store/reducers/rootReducer.js","index.js"],"names":["SignedInLinks","props","react_default","a","createElement","id","Date","getTime","className","NavLink","to","Navbar","Link","src","alt","data-target","layout_SignedInLinks","NavbarView","layout_Navbar","MarvelAPI","axios","create","baseURL","process","defaults","params","apikey","hash","ts","services_CharacterService","CharacterService","Object","classCallCheck","this","FETCH_ALL_CHARACTER","console","log","request","url","concat","limit","offset","method","get","LoadingPanel","loadingPanel","gridContent","document","querySelector","loaded","ReactDOM","createPortal","Component","CharacterDetails","possibleConstructorReturn","getPrototypeOf","call","fetchCharacterById","data","ch","length","name","thumbnail","path","extension","description","Redirect","common_LoadingPanel","connect","state","character","results","dispatch","_ref2","asyncToGenerator","regenerator_default","mark","_callee2","getState","result","wrap","_context2","prev","next","type","sent","t0","error","stop","_x3","_x4","apply","arguments","CharacterDetailsView","characters_CharacterDetails","match","CharacterGrid","handlePageChanged","event","page","take","skip","_this","fetchCharacters","handleRowClick","selectCharacter","dataItem","grid","main","style","height","map","item","objectSpread","selected","selectedId","selectedField","total","pageable","onPageChange","onRowClick","field","width","title","cell","_ref","_callee","_context","_x","_x2","Dashboard","characters_CharacterGrid","DashboardView","dashboard_Dashboard","CharacterGridView","App","HashRouter","layout_NavbarView","Switch","Route","exact","component","Boolean","window","location","hostname","initState","authReducer","undefined","characterReducer","action","rootReducer","combineReducers","auth","store","createStore","applyMiddleware","thunk","render","es","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1dac5381.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nconst SignedInLinks = (props) => {\r\n    return (\r\n        <ul id={props.id ? props.id : new Date().getTime()} className={props.className}>\r\n            <li>\r\n                <NavLink to=\"/character\">Characters</NavLink>\r\n            </li>\r\n            <li>\r\n                <NavLink to=\"/\">Comics</NavLink>\r\n            </li>\r\n            <li>\r\n                <NavLink to=\"/\">Series</NavLink>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SignedInLinks;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SignedInLinks from './SignedInLinks';\r\nconst Navbar = () => {\r\n    return (\r\n        <div>\r\n            <nav className=\"red darken-2\">\r\n                <div className=\"nav-wrapper\">\r\n                    <Link to='#' className=\"brand-logo\"><img className=\"responsive-img\" src=\"./img/logo1.png\" alt=\"Marvel Manager\"/></Link>\r\n                    <Link to=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></Link>\r\n                    <SignedInLinks className=\"right hide-on-med-and-down\"/>\r\n                </div>\r\n\r\n            </nav>\r\n            <SignedInLinks id=\"mobile-demo\" className=\"sidenav\"/>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport Navbar from './../../components/layout/Navbar';\r\nconst NavbarView = () => {\r\n    return (\r\n        <Navbar />\r\n    )\r\n}\r\n\r\nexport default NavbarView","import axios from 'axios';\r\nconst MarvelAPI = axios.create({\r\n    baseURL: process.env.REACT_APP_MARVEL_API_URL,\r\n});\r\nMarvelAPI.defaults.params = {\r\n    apikey: process.env.REACT_APP_MARVEL_API_KEY,\r\n    hash: process.env.REACT_APP_MARVEL_API_HASH,\r\n    ts: \"\"\r\n}\r\n// MarvelAPI.prototype.request = function(config){\r\n//     var defaultConfig = {\r\n//         baseURL: process.env.REACT_APP_MARVEL_API_URL,\r\n//         params: {\r\n//             apikey: process.env.REACT_APP_MARVEL_API_KEY,\r\n//             hash: process.env.REACT_APP_MARVEL_API_HASH,\r\n//             ts: \"\"\r\n//         },\r\n//         data: {}\r\n//     }\r\n//     MarvelAPI.request()\r\n// }\r\n// MarvelAPI.interceptors.request.use(function (c) {\r\n//     // Do something before request is sent\r\n//     let newConfig = Object.assign({}, c);\r\n//     newConfig.url = `${newConfig.url}?ts=&apikey=${}&hash=${process.env.REACT_APP_MARVEL_API_HASH}`\r\n//     return newConfig;\r\n// }, function (error) {\r\n//     // Do something with request error\r\n//     return Promise.reject(error);\r\n// });\r\nexport default MarvelAPI;","import MarvelAPI from '../config/MarvelAPI';\r\nclass CharacterService {\r\n    constructor(){\r\n        this.FETCH_ALL_CHARACTER = \"/v1/public/characters\";\r\n    }\r\n    fetchCharacters(params){\r\n        console.log(params);\r\n        return MarvelAPI.request({\r\n            url: `${this.FETCH_ALL_CHARACTER}?limit=${params.limit}&offset=${params.offset}`,\r\n            method: 'get',\r\n            params: params\r\n        });\r\n    }\r\n    fetchCharacterById(id){\r\n        return MarvelAPI.get(this.FETCH_ALL_CHARACTER+\"/\"+id);\r\n    }\r\n}\r\nexport default new CharacterService();","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nclass LoadingPanel extends Component {\r\n    render() {\r\n        const loadingPanel = (\r\n            <div className=\"k-loading-mask\">\r\n                <span className=\"k-loading-text\">Loading</span>\r\n                <div className=\"k-loading-image\"></div>\r\n                <div className=\"k-loading-color\"></div>\r\n            </div>\r\n        );\r\n\r\n        const gridContent = document && document.querySelector('.k-grid-content');\r\n        if (this.props.loaded && this.props.loaded === true) {\r\n            return \"\"\r\n        }else{\r\n            return gridContent ? ReactDOM.createPortal(loadingPanel, gridContent) : loadingPanel;\r\n        }\r\n    }\r\n}\r\nexport default LoadingPanel","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchCharacterById } from '../../../store/actions/characterActions';\r\nimport LoadingPanel from '../../common/LoadingPanel';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nclass CharacterDetails extends Component {\r\n    constructor(props) {\r\n        super();\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchCharacterById(this.props.id);\r\n        console.log(this.props);\r\n    }\r\n    render() {\r\n        const { loaded } = this.props;\r\n\r\n        if (this.props.loaded && this.props.loaded === true) {\r\n            const { data } = this.props;\r\n            const ch = data && data.length > 0 ? data[0] : null;\r\n            if (!ch) {\r\n                return <Redirect to='/' />\r\n            } else {\r\n                return (\r\n                    <div className=\"container section character-details\">\r\n                        <div className=\"container\">\r\n                            <h4>{ch.name}</h4>\r\n                            <div className=\"card\">\r\n                                <div className=\"card-image\">\r\n                                    <img alt={ch.name} className=\"img-responsive\" src={ch.thumbnail.path + \".\" + ch.thumbnail.extension} />\r\n                                    <span className=\"card-title\">{ch.name}</span>\r\n                                </div>\r\n                                <div className=\"card-content\">\r\n                                    <p>{ch.description}</p>\r\n                                </div>\r\n                                <div className=\"card-action\">\r\n                                    <Link to='/'> Back </Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return <LoadingPanel loaded={loaded} />;\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loaded: state.character.loaded,\r\n        data: state.character.results\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchCharacterById: (id) => dispatch(fetchCharacterById(id))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CharacterDetails);","import CharacterService from './../../services/CharacterService';\r\nexport const fetchCharacters = (params) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let result = null;\r\n            dispatch({type: 'FETCH_CHARACTERS', result });\r\n            result = await CharacterService.fetchCharacters(params);\r\n            dispatch({type: 'FETCH_CHARACTERS_SUCCESS', result});\r\n        } catch (error) {\r\n            dispatch({type: 'FETCH_CHARACTERS_FAILURE', error});\r\n        }\r\n    }\r\n}\r\nexport const fetchCharacterById = (id) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let result = null;\r\n            dispatch({type: 'FETCH_CHARACTERS', result });\r\n            result = await CharacterService.fetchCharacterById(id);\r\n            dispatch({type: 'FETCH_CHARACTERS_SUCCESS', result});\r\n        } catch (error) {\r\n            dispatch({type: 'FETCH_CHARACTERS_FAILURE', error});\r\n        }\r\n    }\r\n}\r\n\r\nexport const selectCharacter = (selectedId) => {\r\n    return (dispatch, getState) => {\r\n        dispatch({type: 'SELECT_CHARACTER', selectedId});\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport CharacterDetails from '../../../components/marvel/characters/CharacterDetails';\r\nclass CharacterDetailsView extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CharacterDetails id={this.props.match.params.id} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CharacterDetailsView;\r\n","import React, { Component } from 'react';\r\n// Import the Grid component.\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { connect } from 'react-redux';\r\nimport { fetchCharacters, selectCharacter } from '../../../store/actions/characterActions';\r\nimport { Link } from 'react-router-dom';\r\nimport LoadingPanel from '../../common/LoadingPanel';\r\nclass CharacterGrid extends Component {\r\n\r\n    componentDidMount() {\r\n        var params = {\r\n            limit: 20,\r\n            offset: 0,\r\n        }\r\n        this.props.fetchCharacters(params);\r\n    }\r\n    render() {\r\n        const { grid } = this.props;\r\n\r\n        const gridStyle = {\r\n            height: '700px'\r\n        }\r\n        return (\r\n            <div className=\"section character-list\">\r\n                <h5>All Marvels</h5>\r\n                <Grid style={gridStyle}\r\n                    data={grid.data ? grid.data.map(\r\n                        (item) => ({ ...item, selected: item.id === grid.selectedId }))\r\n                    : []}\r\n                    selectedField=\"selected\"\r\n                    skip={grid.offset}\r\n                    take={grid.limit}\r\n                    total={grid.total}\r\n                    pageable={true}\r\n                    onPageChange={this.handlePageChanged}\r\n                    onRowClick={this.handleRowClick}\r\n                >\r\n                    <GridColumn field=\"name\" width=\"150\" title=\"Name\" />\r\n                    <GridColumn field=\"description\" className='nowrap' title=\"Description\" />\r\n                    <GridColumn field=\"thumbnail\" width=\"200\" title=\" \" cell={(props) => (\r\n                        <td>\r\n                            <Link to={'/character/' + props.dataItem['id']}>\r\n                                <img className=\"img-responsive\" alt=\"\" height='150' src={`${props.dataItem[props.field].path}.${props.dataItem[props.field].extension}`} />\r\n                            </Link>\r\n                        </td>\r\n                    )} />\r\n                </Grid>\r\n                <LoadingPanel loaded={grid.loaded} />\r\n            </div>\r\n        )\r\n    }\r\n    handlePageChanged = (event) => {\r\n        var params = {\r\n            limit: event.page.take,\r\n            offset: event.page.skip,\r\n        }\r\n        this.props.fetchCharacters(params);\r\n    }\r\n    handleRowClick = (event) => {\r\n        this.props.selectCharacter(event.dataItem.id);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        grid: {\r\n            loaded: state.character.loaded,\r\n            selectedId: state.character.selectedId,\r\n            offset: state.character.offset,\r\n            limit: state.character.limit,\r\n            total: state.character.total,\r\n            data: state.character.results\r\n        }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchCharacters: (params) => dispatch(fetchCharacters(params)),\r\n        selectCharacter: (id) => dispatch(selectCharacter(id))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CharacterGrid);\r\n","import React, { Component } from 'react';\r\nimport CharacterGrid from '../marvel/characters/CharacterGrid';\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CharacterGrid />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Dashboard;","import React, { Component } from 'react';\r\nimport Dashboard from './../../components/dashboard/Dashboard';\r\nclass DashboardView extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"dashboard-view\">\r\n                <Dashboard />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default DashboardView;","import React, { Component } from 'react';\r\nimport CharacterGrid from './../../../components/marvel/characters/CharacterGrid';\r\nclass CharacterGridView extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"charactergrid-view\">\r\n                <CharacterGrid />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CharacterGridView;\r\n","import React, { Component } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport NavbarView from './views/layout/NavbarView';\nimport CharacterDetailsView from './views/marvel/characters/CharacterDetailsView';\nimport DashboardView from './views/dashboard/DashboardView';\nimport CharacterGridView from './views/marvel/characters/CharacterGridView';\nclass App extends Component {\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App container\">\n          <NavbarView />\n          <Switch>\n            <Route exact path=\"/\" component={DashboardView} />\n            <Route exact path=\"/character\" component={CharacterGridView} />\n            <Route path=\"/character/:id\" component={CharacterDetailsView} />\n          </Switch>\n        </div>\n      </HashRouter>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {}\r\n\r\nconst authReducer = (state = initState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default authReducer;","const initState = {\r\n}\r\n\r\nconst characterReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_CHARACTERS':\r\n            return {\r\n                ...state,\r\n                loaded: false\r\n            };\r\n        case 'FETCH_CHARACTERS_SUCCESS':\r\n        console.log({\r\n                ...state,\r\n                ...action.result.data.data,\r\n                selectedId: null,\r\n                loaded: true\r\n            });\r\n            return {\r\n                ...state,\r\n                ...action.result.data.data,\r\n                selectedId: null,\r\n                loaded: true\r\n            };\r\n        case 'FETCH_CHARACTERS_FAILURE':\r\n            return {\r\n                ...state,\r\n                loaded: true\r\n            };\r\n        case 'SELECT_CHARACTER':\r\n            return { ...state, selectedId: action.selectedId };\r\n        case 'CALL_ERRORS':\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default characterReducer;","import authReducer from './authReducer';\r\nimport characterReducer from './characterReducer';\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    character: characterReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@progress/kendo-theme-material/dist/all.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}