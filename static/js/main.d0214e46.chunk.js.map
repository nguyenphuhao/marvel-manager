{"version":3,"sources":["components/layout/SignedInLinks.js","components/layout/Navbar.js","components/marvel/characters/CharacterList.js","components/dashboard/Dashboard.js","components/marvel/characters/CharacterDetails.js","App.js","serviceWorker.js","index.js"],"names":["SignedInLinks","props","react_default","a","createElement","id","Date","getTime","className","NavLink","to","Navbar","Link","data-target","layout_SignedInLinks","CharacterList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","ProductName","Price","title","main","field","Component","Dashboard","characters_CharacterList","CharacterDetails","App","uri","BrowserRouter","layout_Navbar","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0214e46.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nconst SignedInLinks = (props) => {\r\n    return (\r\n        <ul id={props.id ? props.id : new Date().getTime()} className={props.className}>\r\n            <li>\r\n                <NavLink to=\"/\">Characters</NavLink>\r\n            </li>\r\n            <li>\r\n                <NavLink to=\"/\">Comics</NavLink>\r\n            </li>\r\n            <li>\r\n                <NavLink to=\"\">Series</NavLink>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SignedInLinks","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SignedInLinks from './SignedInLinks';\r\nconst Navbar = () => {\r\n    return (\r\n        <div>\r\n            <nav className=\"red darken-2\">\r\n                <div className=\"nav-wrapper\">\r\n                    <Link to='#!' className=\"brand-logo\">Marvel Manager</Link>\r\n                    <Link to=\"/#\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></Link>\r\n                    <SignedInLinks className=\"right hide-on-med-and-down\"/>\r\n                </div>\r\n\r\n            </nav>\r\n            <SignedInLinks id=\"mobile-demo\" className=\"sidenav\"/>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, { Component } from 'react';\r\n// Import the Grid component.\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\n\r\nclass CharacterList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [\r\n                { ProductName: \"Chai\", Price: 10 },\r\n                { ProductName: \"Chang\", Price: 20 }\r\n            ],\r\n            title: \"Hello from KendoReact!\"\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container section character-list\">\r\n                <h5>All Marvels</h5>\r\n                <Grid data={this.state.data}>\r\n                    <GridColumn field=\"ProductName\" title=\"Product name\" />\r\n                    <GridColumn field=\"Price\" />\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CharacterList;\r\n","import React, { Component } from 'react';\r\nimport CharacterList from './../marvel/characters/CharacterList';\r\nclass Dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"dashboard container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <CharacterList />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Dashboard","import React, { Component } from 'react';\r\nclass CharacterDetails extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container section character-details\">\r\n                <h5>Character Details</h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CharacterDetails;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport '@progress/kendo-theme-material/dist/all.css';\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport CharacterDetails from './components/marvel/characters/CharacterDetails';\nimport CharacterList from './components/marvel/characters/CharacterList';\nclass App extends Component {\n\n  render() {\n    const uri = \"marvel-manager\";\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path={uri + \"/\"} component={Dashboard} />\n            <Route path={uri + \"/character\"} component={CharacterList} />\n            <Route path={uri + \"/character/:id\"} component={CharacterDetails} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}